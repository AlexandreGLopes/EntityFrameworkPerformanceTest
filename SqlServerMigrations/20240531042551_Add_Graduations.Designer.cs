// <auto-generated />
using System;
using EFPerformanceTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFPerformanceTest.SqlServerMigrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240531042551_Add_Graduations")]
    partial class Add_Graduations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFPerformanceTest.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EFPerformanceTest.Models.Graduation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AccomplishDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Graduation");
                });

            modelBuilder.Entity("EFPerformanceTest.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PersonsGraduations", b =>
                {
                    b.Property<int>("GraduationsId")
                        .HasColumnType("int");

                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.Property<int?>("GraduationId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("GraduationsId", "PersonsId");

                    b.HasIndex("GraduationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonsId");

                    b.ToTable("PersonsGraduations");
                });

            modelBuilder.Entity("EFPerformanceTest.Models.Person", b =>
                {
                    b.HasOne("EFPerformanceTest.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("EFPerformanceTest.Models.Person", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Person_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("PersonsGraduations", b =>
                {
                    b.HasOne("EFPerformanceTest.Models.Graduation", null)
                        .WithMany()
                        .HasForeignKey("GraduationId");

                    b.HasOne("EFPerformanceTest.Models.Graduation", null)
                        .WithMany()
                        .HasForeignKey("GraduationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFPerformanceTest.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("EFPerformanceTest.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
